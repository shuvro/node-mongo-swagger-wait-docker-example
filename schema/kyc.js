let mongoose = require('mongoose');
let Schema = mongoose.Schema;
let id = mongoose.Schema.Types.ObjectId;
let moment = require('moment');
let kyc = new Schema({
    // name : String,
    // lastname : String,
    // secondLastname : String,
    // dob : String,
    // idType : String,
    // idNumber : String,
    // idExpirationDate : String,
    // countryOB : String,
    // nationality : String,
    // sex : String,
    // homePhone : String,
    // cellPhone : String,
    // fax : String,
    // email : String,
    // secundaryEmail : String,
    // profession : String,
    // occupation : String,
    // maritalStatus : String,
    // countryResidence : String,
    // province : String,
    // canton : String,
    // distrit : String,
    // poBox : String,
    // address : String,
    additionalRepresentative: [],
    //laboral info
    businessName : String,
    businessOccupation : String,
    businessNature : String,
    businessPhone : String,
    businessRevenue : String,
    businessCurrency : String,
    businessAddress : String,
    //political info
    pep : String,
    usTaxPayer : String,
    fatcaTin : String,
    crsTin : String,
    crsAddress : String,
    crsTin1 : String,
    crsAddress1 : String,
    crsTin2 : String,
    crsAddress2 : String,
    fepClient: String ,
    gin: String,
    fepName: String,
    fepTIN: String,
    fepAddress: String,
    //origin of the founds
    foundOrigin: [],
    heritageName: String,
    heritageRelationship: String,
    heritageAmount: String,
    pensionAmount: String,
    pensionDate: String,
    movingFoundsName: String,
    movingFoundsCurrency: String,
    movingFoundsAmount: String,
    movingFoundsDetail: String,
    otherDetail: String,
    thirtPartyFounds: String,
    thirdPartyPicture: [],
    activities: [],
    activitiesValidation: String,
    //Banking references
    bankingReference : [],
    mainClients : [],
    products : [],
    creditCardLimit : String,
    creditCardCurrency : String,
    accountCurrency : String,
    accountCurrency1 : String,
    accountCurrency2 : String,
    savingAccountCurrency: String ,
    savingAccountCurrency1: String ,
    savingAccountCurrency2: String ,
    highAccountCurrency: String   ,
    highAccountCurrency1: String   ,
    highAccountCurrency2: String   ,
    //Expected Activity
    expectedProducts : [],
    additionalSigners: [],
    productDesc : String,
    estimateCreditAmount : String,
    estimateCreditCurrency : String,
    estimateDebitAmount : String,
    estimateDebitCurrency : String,
    otherProductDesc: String,
    //Files
    workDocPic :[],
    idPicFront :[],
    certificationPatrimonialPic: [],
    identificationRepresentativePic: [],
    idPicBack :[],
    publicService :[]  ,
    signature: {},
    //Aditional Signers
    aditionalSigners: {},
    //Metadata
    metadata: {
        interactions: [],
        latestSeen: Date,
        firstSeen: Date,
        latestStep: String,
        asignedTo: String, //login
        signatureDate: Date
    },
    revisions: [],
    rejects: [],
    createdAt: { type: Date, default: function(){return moment()} },
    updatedAt: Date,
    transactionID: String,
    carisId: String,
    status: String, //pending, signed, done, waitingApproval, waitingClient
    owner: String,


    legalId: String,
    companyRegistrationName: String,
    tradeName: String,
    constitutionDate: String,
    typeOfLegalEntity: String,
    typeOfLegalEntityOther: String,
    typeOfEconomicActivity: String,
    economicActivityDetail: String,

    companyFound: String,
    companyCountryResidence: String,
    companyProvince: String,
    companyCanton: String,
    companyDistrit: String,
    companyPoBox: String,
    companyAddress: String,

    partners: [],
    excelPartnerId: String

});

module.exports = kyc;
